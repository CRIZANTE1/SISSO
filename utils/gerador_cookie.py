#!/usr/bin/env python3
"""
Gerador de Cookie Simples
Gera cookies seguros para autentica√ß√£o e sess√µes
"""

import secrets
import string
import base64
import hashlib
import time
from datetime import datetime, timedelta

class CookieGenerator:
    """Gerador de cookies seguros"""
    
    def __init__(self, length=32):
        """
        Inicializa o gerador de cookies
        
        Args:
            length (int): Tamanho do cookie em caracteres (padr√£o: 32)
        """
        self.length = length
        self.charset = string.ascii_letters + string.digits + '+/'
    
    def generate_simple(self):
        """
        Gera um cookie simples usando caracteres alfanum√©ricos e s√≠mbolos
        
        Returns:
            str: Cookie gerado
        """
        return ''.join(secrets.choice(self.charset) for _ in range(self.length))
    
    def generate_base64(self):
        """
        Gera um cookie usando base64 encoding
        
        Returns:
            str: Cookie em base64
        """
        # Gera bytes aleat√≥rios
        random_bytes = secrets.token_bytes(self.length // 2)
        # Converte para base64 e remove padding
        return base64.b64encode(random_bytes).decode('utf-8').rstrip('=')
    
    def generate_hex(self):
        """
        Gera um cookie em hexadecimal
        
        Returns:
            str: Cookie em hex
        """
        return secrets.token_hex(self.length // 2)
    
    def generate_with_timestamp(self):
        """
        Gera um cookie que inclui timestamp para expira√ß√£o
        
        Returns:
            str: Cookie com timestamp
        """
        # Gera parte aleat√≥ria
        random_part = secrets.token_hex(16)
        # Adiciona timestamp
        timestamp = str(int(time.time()))
        # Combina e faz hash
        combined = f"{random_part}{timestamp}"
        return hashlib.sha256(combined.encode()).hexdigest()
    
    def generate_session_id(self):
        """
        Gera um ID de sess√£o similar ao exemplo fornecido
        
        Returns:
            str: ID de sess√£o
        """
        # Gera 32 bytes aleat√≥rios
        random_bytes = secrets.token_bytes(32)
        # Converte para base64 e remove padding
        return base64.b64encode(random_bytes).decode('utf-8').rstrip('=')
    
    def generate_multiple(self, count=5, method='simple'):
        """
        Gera m√∫ltiplos cookies
        
        Args:
            count (int): N√∫mero de cookies a gerar
            method (str): M√©todo de gera√ß√£o ('simple', 'base64', 'hex', 'timestamp', 'session')
        
        Returns:
            list: Lista de cookies gerados
        """
        methods = {
            'simple': self.generate_simple,
            'base64': self.generate_base64,
            'hex': self.generate_hex,
            'timestamp': self.generate_with_timestamp,
            'session': self.generate_session_id
        }
        
        if method not in methods:
            raise ValueError(f"M√©todo '{method}' n√£o suportado. Use: {list(methods.keys())}")
        
        return [methods[method]() for _ in range(count)]

def main():
    """Fun√ß√£o principal - Interface de linha de comando"""
    print("üç™ Gerador de Cookie Simples")
    print("=" * 40)
    
    # Configura√ß√µes
    length = 32
    generator = CookieGenerator(length)
    
    while True:
        print("\nüìã Op√ß√µes dispon√≠veis:")
        print("1. Gerar cookie simples")
        print("2. Gerar cookie base64")
        print("3. Gerar cookie hexadecimal")
        print("4. Gerar cookie com timestamp")
        print("5. Gerar ID de sess√£o (como exemplo)")
        print("6. Gerar m√∫ltiplos cookies")
        print("7. Configurar tamanho")
        print("8. Sair")
        
        choice = input("\nEscolha uma op√ß√£o (1-8): ").strip()
        
        if choice == '1':
            cookie = generator.generate_simple()
            print(f"\n‚úÖ Cookie simples: {cookie}")
            
        elif choice == '2':
            cookie = generator.generate_base64()
            print(f"\n‚úÖ Cookie base64: {cookie}")
            
        elif choice == '3':
            cookie = generator.generate_hex()
            print(f"\n‚úÖ Cookie hex: {cookie}")
            
        elif choice == '4':
            cookie = generator.generate_with_timestamp()
            print(f"\n‚úÖ Cookie com timestamp: {cookie}")
            
        elif choice == '5':
            cookie = generator.generate_session_id()
            print(f"\n‚úÖ ID de sess√£o: {cookie}")
            print(f"   (Similar ao exemplo: UOiaDrpnOcHc4elcu6i8/kyv8qoXPXDe277hurcu8r3=)")
            
        elif choice == '6':
            method = input("M√©todo (simple/base64/hex/timestamp/session): ").strip().lower()
            count = int(input("Quantidade: ") or "5")
            cookies = generator.generate_multiple(count, method)
            print(f"\n‚úÖ {count} cookies gerados:")
            for i, cookie in enumerate(cookies, 1):
                print(f"   {i}. {cookie}")
                
        elif choice == '7':
            new_length = int(input(f"Novo tamanho (atual: {length}): ") or str(length))
            generator = CookieGenerator(new_length)
            length = new_length
            print(f"‚úÖ Tamanho alterado para {length}")
            
        elif choice == '8':
            print("üëã At√© logo!")
            break
            
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
        
        # Pergunta se quer copiar
        if choice in ['1', '2', '3', '4', '5']:
            copy_choice = input("\nüìã Copiar para √°rea de transfer√™ncia? (s/n): ").strip().lower()
            if copy_choice == 's':
                try:
                    import pyperclip
                    pyperclip.copy(cookie)
                    print("‚úÖ Copiado para √°rea de transfer√™ncia!")
                except ImportError:
                    print("‚ö†Ô∏è  pyperclip n√£o instalado. Instale com: pip install pyperclip")

if __name__ == "__main__":
    main()
