"""
P√°gina de Debug para Conex√£o Supabase
"""
import streamlit as st
import os
import traceback
from datetime import datetime
from managers.supabase_config import get_supabase_client, get_service_role_client, test_connection
from utils.supabase_debug import get_debugger

def app(filters=None):
    st.title("üîß Debug - Conex√£o Supabase")
    st.markdown("Esta p√°gina ajuda a diagnosticar problemas de conex√£o com o Supabase.")
    
    # Inicializa o debugger
    debugger = get_debugger()
    
    # Se√ß√£o 1: Verifica√ß√£o de Configura√ß√£o
    st.header("1. üìã Verifica√ß√£o de Configura√ß√£o")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Vari√°veis de Ambiente")
        env_url = os.environ.get("SUPABASE_URL")
        env_key = os.environ.get("SUPABASE_ANON_KEY")
        env_service_key = os.environ.get("SUPABASE_SERVICE_ROLE_KEY")
        
        st.write(f"**SUPABASE_URL:** {'‚úÖ Definida' if env_url else '‚ùå N√£o definida'}")
        if env_url:
            st.code(env_url[:50] + "..." if len(env_url) > 50 else env_url)
        
        st.write(f"**SUPABASE_ANON_KEY:** {'‚úÖ Definida' if env_key else '‚ùå N√£o definida'}")
        if env_key:
            st.code(env_key[:20] + "..." if len(env_key) > 20 else env_key)
            
        st.write(f"**SUPABASE_SERVICE_ROLE_KEY:** {'‚úÖ Definida' if env_service_key else '‚ùå N√£o definida'}")
        if env_service_key:
            st.code(env_service_key[:20] + "..." if len(env_service_key) > 20 else env_service_key)
    
    with col2:
        st.subheader("Streamlit Secrets")
        try:
            secrets_url = st.secrets.get("supabase", {}).get("url")
            secrets_key = st.secrets.get("supabase", {}).get("anon_key")
            secrets_service_key = st.secrets.get("supabase", {}).get("service_role_key")
            
            st.write(f"**URL:** {'‚úÖ Definida' if secrets_url else '‚ùå N√£o definida'}")
            if secrets_url:
                st.code(secrets_url[:50] + "..." if len(secrets_url) > 50 else secrets_url)
            
            st.write(f"**ANON_KEY:** {'‚úÖ Definida' if secrets_key else '‚ùå N√£o definida'}")
            if secrets_key:
                st.code(secrets_key[:20] + "..." if len(secrets_key) > 20 else secrets_key)
                
            st.write(f"**SERVICE_ROLE_KEY:** {'‚úÖ Definida' if secrets_service_key else '‚ùå N√£o definida'}")
            if secrets_service_key:
                st.code(secrets_service_key[:20] + "..." if len(secrets_service_key) > 20 else secrets_service_key)
                
        except Exception as e:
            st.error(f"Erro ao acessar secrets: {str(e)}")
    
    # Se√ß√£o 2: Status Detalhado da Configura√ß√£o
    st.header("2. üîç Status Detalhado")
    
    if st.button("üîÑ Atualizar Status"):
        config_status = debugger.get_configuration_status()
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Vari√°veis de Ambiente")
            for key, value in config_status["env_vars"].items():
                status_icon = "‚úÖ" if value else "‚ùå"
                st.write(f"{status_icon} **{key}**")
        
        with col2:
            st.subheader("Streamlit Secrets")
            for key, value in config_status["secrets"].items():
                status_icon = "‚úÖ" if value else "‚ùå"
                st.write(f"{status_icon} **{key}**")
        
        # Mostra valores (mascarados)
        st.subheader("Valores de Configura√ß√£o")
        with st.expander("Ver valores (mascarados)"):
            for key, value in config_status["values"].items():
                if value:
                    masked_value = value[:10] + "..." + value[-5:] if len(value) > 15 else value
                    st.write(f"**{key}:** `{masked_value}`")
                else:
                    st.write(f"**{key}:** `N√£o definido`")
    
    # Se√ß√£o 3: Teste de Conex√£o
    st.header("3. üîå Teste de Conex√£o")
    
    if st.button("üß™ Testar Conex√£o An√¥nima", type="primary"):
        with st.spinner("Testando conex√£o..."):
            try:
                client = get_supabase_client()
                if client:
                    st.success("‚úÖ Cliente Supabase criado com sucesso!")
                    
                    # Teste de query simples
                    try:
                        response = client.table("profiles").select("id").limit(1).execute()
                        try:
                            if hasattr(response, 'data'):
                                data = getattr(response, 'data', [])
                                if data and len(data) > 0:
                                    st.success(f"‚úÖ Query executada com sucesso! Retornou {len(data)} registros.")
                                    st.json(data[0])
                                else:
                                    st.info("‚ÑπÔ∏è Tabela 'profiles' est√° vazia ou n√£o existe.")
                            else:
                                st.info("‚ÑπÔ∏è Resposta n√£o cont√©m dados esperados.")
                        except Exception:
                            st.info("‚ÑπÔ∏è Erro ao processar resposta da query.")
                            
                    except Exception as query_error:
                        st.error(f"‚ùå Erro na query: {str(query_error)}")
                        st.code(traceback.format_exc())
                        
                else:
                    st.error("‚ùå Falha ao criar cliente Supabase")
                    
            except Exception as e:
                st.error(f"‚ùå Erro geral: {str(e)}")
                st.code(traceback.format_exc())
    
    if st.button("üîê Testar Conex√£o Service Role"):
        with st.spinner("Testando conex√£o service role..."):
            try:
                client = get_service_role_client()
                if client:
                    st.success("‚úÖ Cliente Service Role criado com sucesso!")
                    
                    # Teste de query com service role
                    try:
                        response = client.table("profiles").select("id").limit(1).execute()
                        try:
                            if hasattr(response, 'data'):
                                data = getattr(response, 'data', [])
                                if data and len(data) > 0:
                                    st.success(f"‚úÖ Query Service Role executada! Retornou {len(data)} registros.")
                                else:
                                    st.info("‚ÑπÔ∏è Query Service Role executada, mas sem dados retornados.")
                            else:
                                st.info("‚ÑπÔ∏è Resposta Service Role n√£o cont√©m dados esperados.")
                        except Exception:
                            st.info("‚ÑπÔ∏è Erro ao processar resposta Service Role.")
                        
                    except Exception as query_error:
                        st.error(f"‚ùå Erro na query Service Role: {str(query_error)}")
                        st.code(traceback.format_exc())
                        
                else:
                    st.error("‚ùå Falha ao criar cliente Service Role")
                    
            except Exception as e:
                st.error(f"‚ùå Erro Service Role: {str(e)}")
                st.code(traceback.format_exc())
    
    # Se√ß√£o 4: Teste de Tabelas
    st.header("4. üìä Teste de Tabelas")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        table_name = st.selectbox(
            "Selecione uma tabela para testar:",
            ["profiles", "acidentes", "quase_acidentes", "nao_conformidades", "kpis"],
            index=0
        )
        
        if st.button("üîç Testar Acesso √† Tabela"):
            with st.spinner(f"Testando acesso √† tabela {table_name}..."):
                result = debugger.test_table_access(table_name)
                
                if result["table_exists"]:
                    st.success(f"‚úÖ Tabela '{table_name}' existe")
                    
                    if result["can_read"]:
                        st.success("‚úÖ Acesso de leitura OK")
                        if result["columns"]:
                            st.write(f"**Colunas:** {', '.join(result['columns'])}")
                    else:
                        st.error("‚ùå Erro no acesso de leitura")
                    
                    if result["can_write"]:
                        st.success("‚úÖ Acesso de escrita OK")
                    else:
                        st.warning("‚ö†Ô∏è Acesso de escrita limitado")
                        
                    if result["error"]:
                        st.error(f"‚ùå Erro: {result['error']}")
                else:
                    st.error(f"‚ùå Tabela '{table_name}' n√£o existe ou n√£o acess√≠vel")
    
    with col2:
        st.subheader("Tabelas Conhecidas")
        st.markdown("""
        - **profiles**: Perfis de usu√°rios
        - **acidentes**: Registros de acidentes
        - **quase_acidentes**: Registros de quase-acidentes
        - **nao_conformidades**: Registros de n√£o conformidades
        - **kpis**: Dados de KPIs e controles
        """)
    
    # Se√ß√£o 5: Teste de Autentica√ß√£o
    st.header("5. üë§ Teste de Autentica√ß√£o")
    
    if st.button("üîç Testar Autentica√ß√£o de Usu√°rio"):
        with st.spinner("Testando autentica√ß√£o..."):
            try:
                from auth.auth_utils import check_user_in_database, get_user_email
                
                user_email = get_user_email()
                if user_email:
                    st.info(f"Email do usu√°rio: {user_email}")
                    
                    user_info = check_user_in_database(user_email)
                    if user_info:
                        st.success("‚úÖ Usu√°rio autenticado com sucesso!")
                        st.json(user_info)
                    else:
                        st.warning("‚ö†Ô∏è Usu√°rio n√£o encontrado na base de dados")
                else:
                    st.warning("‚ö†Ô∏è Nenhum usu√°rio logado via OIDC")
                    
            except Exception as e:
                st.error(f"‚ùå Erro na autentica√ß√£o: {str(e)}")
                st.code(traceback.format_exc())
    
    # Se√ß√£o 6: Informa√ß√µes do Sistema
    st.header("6. ‚ÑπÔ∏è Informa√ß√µes do Sistema")
    
    if st.button("üîÑ Atualizar Informa√ß√µes do Sistema"):
        system_info = debugger.get_system_info()
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Vers√µes")
            st.write(f"**Python:** {system_info['python_version']}")
            st.write(f"**Streamlit:** {system_info['streamlit_version']}")
            st.write(f"**Supabase:** {system_info['supabase_version']}")
            st.write(f"**Plataforma:** {system_info['platform']}")
        
        with col2:
            st.subheader("Status da Sess√£o")
            st.write(f"**Usu√°rio logado:** {'‚úÖ Sim' if st.session_state.get('authenticated_user_email') else '‚ùå N√£o'}")
            st.write(f"**Role:** {st.session_state.get('role', 'N/A')}")
            st.write(f"**User ID:** {st.session_state.get('user_id', 'N/A')}")
            st.write(f"**Diret√≥rio:** {system_info['working_directory']}")
    
    # Se√ß√£o 7: Logs de Debug
    st.header("7. üìù Logs de Debug")
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Mostra logs do debugger
        logs = debugger.get_logs(limit=20)
        if logs:
            st.subheader("Logs Recentes")
            for log in reversed(logs[-10:]):  # √öltimos 10 logs
                st.text(log)
        else:
            st.info("Nenhum log dispon√≠vel")
    
    with col2:
        if st.button("üîÑ Atualizar Logs"):
            st.rerun()
        
        if st.button("üóëÔ∏è Limpar Logs"):
            debugger.clear_logs()
            st.rerun()
        
        if st.button("üìã Copiar Logs"):
            logs_text = "\n".join(debugger.get_logs())
            st.code(logs_text)
            st.info("Logs copiados para a √°rea de transfer√™ncia")
    
    # Se√ß√£o 8: Comandos de Diagn√≥stico
    st.header("8. üõ†Ô∏è Comandos de Diagn√≥stico")
    
    st.markdown("""
    ### Para diagnosticar problemas:
    
    1. **Verifique se as vari√°veis de ambiente est√£o definidas:**
       ```bash
       echo $SUPABASE_URL
       echo $SUPABASE_ANON_KEY
       ```
    
    2. **Verifique o arquivo .streamlit/secrets.toml:**
       ```toml
       [supabase]
       url = "sua_url_aqui"
       anon_key = "sua_chave_aqui"
       ```
    
    3. **Teste a conex√£o diretamente no Python:**
       ```python
       from supabase import create_client
       client = create_client(url, key)
       result = client.table("profiles").select("*").execute()
       print(result)
       ```
    
    4. **Verifique se a tabela 'profiles' existe no Supabase:**
       - Acesse o painel do Supabase
       - V√° em Table Editor
       - Verifique se a tabela 'profiles' existe
    
    5. **Verifique as pol√≠ticas RLS (Row Level Security):**
       - Acesse Authentication > Policies no Supabase
       - Verifique se as pol√≠ticas est√£o configuradas corretamente
    """)
    
    # Se√ß√£o de resumo
    st.header("9. üìã Resumo do Debug")
    
    if st.button("üîç Executar Diagn√≥stico Completo"):
        with st.spinner("Executando diagn√≥stico completo..."):
            # Testa configura√ß√£o
            config_status = debugger.get_configuration_status()
            
            # Testa conex√£o an√¥nima
            conn_result = debugger.test_connection(use_service_role=False)
            
            # Testa conex√£o service role
            service_result = debugger.test_connection(use_service_role=True)
            
            # Mostra resumo
            st.subheader("Resumo do Diagn√≥stico")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Configura√ß√£o", "‚úÖ OK" if any(config_status["env_vars"].values()) or any(config_status["secrets"].values()) else "‚ùå Falha")
            
            with col2:
                st.metric("Conex√£o An√¥nima", "‚úÖ OK" if conn_result["success"] else "‚ùå Falha")
            
            with col3:
                st.metric("Service Role", "‚úÖ OK" if service_result["success"] else "‚ùå Falha")
            
            # Recomenda√ß√µes
            st.subheader("Recomenda√ß√µes")
            if not conn_result["success"]:
                st.error("‚ùå Verifique as credenciais do Supabase")
            if not service_result["success"]:
                st.warning("‚ö†Ô∏è Service Role Key pode estar incorreta")
            if conn_result["success"] and service_result["success"]:
                st.success("üéâ Sistema funcionando corretamente!")
